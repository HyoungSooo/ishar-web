# Generated by Django 4.2.4 on 2023-08-26 02:21

from django.db import migrations, models
import isharweb.models.unsigned


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('account_id', isharweb.models.unsigned.UnsignedAutoField(help_text='Auto-generated permanent unique account number.', primary_key=True, serialize=False, verbose_name='Account ID')),
                ('created_at', models.DateTimeField(help_text='Date and time when the account was created.', verbose_name='Created At')),
                ('current_essence', models.PositiveIntegerField(help_text='Current amount of essence for the account.', verbose_name='Current Essence')),
                ('email', models.EmailField(help_text='E-mail address for the account.', max_length=30, unique=True, verbose_name='E-mail Address')),
                ('password', models.CharField(help_text='Account password (MD5Crypt) hash.', max_length=36, verbose_name='Password')),
                ('create_isp', models.CharField(help_text='Internet Service Provider (ISP) that created the account.', max_length=25, verbose_name='Create ISP')),
                ('last_isp', models.CharField(help_text='Last Internet Service Provider (ISP) that logged in to the account.', max_length=25, verbose_name='Last ISP')),
                ('create_ident', models.CharField(help_text='Ident that created the account.', max_length=25, verbose_name='Create IDENT')),
                ('last_ident', models.CharField(help_text='Last ident that logged in to the account.', max_length=25, verbose_name='Last IDENT')),
                ('create_haddr', models.IntegerField(help_text='HADDR that created the account.', verbose_name='Create HADDR')),
                ('last_haddr', models.IntegerField(help_text='Last HADDR to log in to the account.', verbose_name='Last HADDR')),
                ('account_name', models.CharField(help_text='User-chosen account name for logging in.', max_length=25, unique=True, verbose_name='Account Name')),
                ('account_gift', models.DateTimeField(help_text='Date and time of account gift.', verbose_name='Account Gift')),
                ('banned_until', models.DateTimeField(blank=True, help_text='Date and time account is banned until.', null=True, verbose_name='Banned Until')),
                ('bugs_reported', models.IntegerField(help_text='Number of bugs reported.', verbose_name='Bugs Reported')),
                ('earned_essence', models.IntegerField(help_text='Amount of essence earned.', verbose_name='Earned Essence')),
            ],
            options={
                'db_table': 'accounts',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the player character.', max_length=15, unique=True, verbose_name='Name')),
                ('create_ident', models.CharField(help_text='Ident that created the player.', max_length=10, verbose_name='Create IDENT')),
                ('last_isp', models.CharField(help_text='Last Internet Service Provider (ISP) to join as the player.', max_length=30, verbose_name='Create IDENT')),
                ('description', models.CharField(blank=True, help_text='User-written in-game player description.', max_length=240, null=True, verbose_name='Description')),
                ('title', models.CharField(help_text='User-selectable player title.', max_length=45, verbose_name='Title')),
                ('poofin', models.CharField(help_text='String displayed upon player poof in.', max_length=80, verbose_name='Poof In')),
                ('poofout', models.CharField(help_text='String displayed upon player poof out.', max_length=80, verbose_name='Poof In')),
                ('bankacc', models.PositiveIntegerField(help_text='Bank account balance.', verbose_name='Bank Account')),
                ('logon_delay', models.PositiveSmallIntegerField(help_text='Delay when logging on.', verbose_name='Logon Delay')),
                ('true_level', models.PositiveIntegerField(help_text='True level of the player character.', verbose_name='True Level')),
                ('renown', models.PositiveIntegerField(help_text='Amount of renown available for the player to spend.', verbose_name='Renown')),
                ('remorts', models.PositiveIntegerField(help_text='Number of times that the player has remorted.', verbose_name='Remorts')),
                ('favors', models.PositiveIntegerField(help_text='Amount of (Godly) favors for the player.', verbose_name='Favors')),
                ('online', models.IntegerField(blank=True, help_text='Amount of time spent logged in to the game, in seconds.', null=True, verbose_name='Online')),
                ('bound_room', models.PositiveIntegerField(help_text='Room ID number where the player is bound.', verbose_name='Bound Room')),
                ('load_room', models.PositiveIntegerField(help_text='Room ID number where the player is loaded.', verbose_name='Load Room')),
                ('invstart_level', models.IntegerField(blank=True, help_text='Invisible Start Level.', null=True, verbose_name='Invisible Start Level')),
                ('login_failures', models.PositiveSmallIntegerField(help_text='Number of login failures.', verbose_name='Login Failures')),
                ('create_haddr', models.IntegerField(help_text='HADDR that created the player.', verbose_name='Create HADDR')),
                ('login_fail_haddr', models.IntegerField(blank=True, help_text='HADDR that last failed to log in to the player.', null=True, verbose_name='Login Fail HADDR')),
                ('last_haddr', models.IntegerField(blank=True, help_text='Last HADDR to join as the player.', null=True, verbose_name='Last HADDR')),
                ('last_ident', models.CharField(blank=True, help_text='Last ident to join as the player.', max_length=10, null=True, verbose_name='Last IDENT')),
                ('load_room_next', models.PositiveIntegerField(blank=True, help_text='Load Room Next.', null=True, verbose_name='Load Room Next')),
                ('load_room_next_expires', models.PositiveIntegerField(blank=True, help_text='Load Room Next Expires.', null=True, verbose_name='Load Room Next Expires')),
                ('aggro_until', models.PositiveIntegerField(blank=True, help_text='Aggro Until.', null=True, verbose_name='Aggro Until')),
                ('inn_limit', models.PositiveSmallIntegerField(help_text='Inn Limit.', verbose_name='Inn Limit')),
                ('held_xp', models.IntegerField(blank=True, help_text='Held XP.', null=True, verbose_name='Held XP')),
                ('last_isp_change', models.PositiveIntegerField(blank=True, help_text='Last Internet Service Provider (ISP) change.', null=True, verbose_name='Last ISP Change')),
                ('is_deleted', models.PositiveIntegerField(help_text='Is the player character deleted?', verbose_name='Is Deleted')),
                ('deaths', models.PositiveSmallIntegerField(help_text='Number of times that the player has died.', verbose_name='Deaths')),
                ('total_renown', models.PositiveSmallIntegerField(help_text='Total amount of renown earned by the player.', verbose_name='Total Renown')),
                ('quests_completed', models.PositiveSmallIntegerField(help_text='Total number of quests completed by the player.', verbose_name='Quests Completed')),
                ('challenges_completed', models.PositiveSmallIntegerField(help_text='Total number of challenges completed by the player.', verbose_name='Challenges Completed')),
                ('game_type', models.IntegerField(help_text='Player game type.', verbose_name='Game Type')),
                ('birth', models.DateTimeField(help_text='Date and time that the player was created.', verbose_name='Birth')),
                ('logon', models.DateTimeField(help_text='Date and time that the player last logged on.', verbose_name='Log On')),
                ('logout', models.DateTimeField(help_text='Date and time that the player last logged out.', verbose_name='Log Out')),
            ],
            options={
                'db_table': 'players',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Quest',
            fields=[
                ('quest_id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=25, unique=True)),
                ('display_name', models.CharField(max_length=30)),
                ('completion_message', models.CharField(max_length=700)),
                ('min_level', models.IntegerField()),
                ('max_level', models.IntegerField()),
                ('repeatable', models.IntegerField()),
                ('description', models.CharField(max_length=512)),
                ('prerequisite', models.IntegerField()),
                ('class_restrict', models.IntegerField()),
                ('quest_intro', models.CharField(max_length=2000)),
                ('quest_source', models.PositiveIntegerField(blank=True, null=True)),
                ('quest_return', models.PositiveIntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'quests',
                'managed': False,
            },
        ),
    ]
