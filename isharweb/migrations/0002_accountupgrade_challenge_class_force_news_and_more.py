# Generated by Django 4.2.4 on 2023-08-28 23:47

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('isharweb', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='AccountUpgrade',
            fields=[
                ('id', models.PositiveIntegerField(help_text='Auto-generated permanent ID number of the account upgrade.', primary_key=True, serialize=False, verbose_name='Account Upgrade ID')),
                ('cost', models.PositiveIntegerField(help_text='Cost of the account upgrade.', verbose_name='Cost')),
                ('description', models.CharField(help_text='Description of the account upgrade.', max_length=400, verbose_name='Description')),
                ('name', models.CharField(help_text='Name of the account upgrade.', max_length=80, unique=True, verbose_name='Name')),
                ('max_value', models.PositiveIntegerField(help_text='Maximum value of the account upgrade.', verbose_name='Maximum Value')),
                ('scale', models.IntegerField(help_text='Scale of the account upgrade.', verbose_name='Scale')),
                ('is_disabled', models.IntegerField(choices=[(0, False), (1, True)], help_text='Is the account upgrade disabled?', verbose_name='Is Disabled?')),
                ('increment', models.IntegerField(help_text='Increment of the account upgrade.', verbose_name='Increment')),
                ('amount', models.IntegerField(help_text='Amount of the account upgrade.', verbose_name='Amount')),
            ],
            options={
                'verbose_name': 'Account Upgrade',
                'verbose_name_plural': 'Account Upgrades',
                'db_table': 'account_upgrades',
                'ordering': ['name', 'description', 'id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('challenge_id', models.SmallAutoField(help_text='Auto-generated permanent challenge identification number.', primary_key=True, serialize=False, verbose_name='Challenge ID')),
                ('mob_vnum', models.IntegerField(help_text='VNUM of the mobile target of the challenge.', verbose_name='Mobile VUM')),
                ('orig_level', models.IntegerField(help_text='Original level of the challenge.', verbose_name='Original Level')),
                ('orig_people', models.IntegerField(help_text='Original number of people for the challenge.', verbose_name='Original People')),
                ('orig_tier', models.IntegerField(help_text='Original tier of the challenge.', verbose_name='Original Tier')),
                ('adj_level', models.IntegerField(help_text='Adjusted level of the challenge.', verbose_name='Adjusted Level')),
                ('adj_people', models.IntegerField(help_text='Adjusted number of people for the challenge.', verbose_name='Adjusted People')),
                ('adj_tier', models.IntegerField(help_text='Adjusted tier of the challenge.', verbose_name='Adjusted Tier')),
                ('challenge_desc', models.CharField(help_text='Friendly description of the challenge.', max_length=80, verbose_name='Challenge Description')),
                ('winner_desc', models.CharField(help_text='Description of the winner(s) of the challenge.', max_length=80, verbose_name='Winner Description')),
                ('mob_name', models.CharField(help_text='Name of the mobile target of the challenge.', max_length=30, verbose_name='Mobile Name')),
                ('is_active', models.IntegerField(choices=[(0, False), (1, True)], help_text='Is the challenge currently active?', verbose_name='Is Active?')),
            ],
            options={
                'verbose_name': 'Challenge',
                'verbose_name_plural': 'Challenges',
                'db_table': 'challenges',
                'ordering': ('-is_active', '-winner_desc', 'challenge_desc'),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Class',
            fields=[
                ('class_id', models.AutoField(help_text='Auto-generated permanent identification number of the player class.', primary_key=True, serialize=False, verbose_name='Class ID')),
                ('class_name', models.CharField(help_text='Name of the player class.', max_length=15, unique=True, verbose_name='Class Name')),
                ('class_display', models.CharField(blank=True, help_text='Display phrase of the player class.', max_length=32, null=True, verbose_name='Class Display')),
                ('class_description', models.CharField(blank=True, help_text='Description of the player class.', max_length=64, null=True, verbose_name='Class Description')),
            ],
            options={
                'verbose_name': 'Class',
                'verbose_name_plural': 'Classes',
                'db_table': 'classes',
                'ordering': ['class_name', 'class_name', 'class_description', 'class_id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Force',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('force_name', models.CharField(blank=True, help_text='Name of the force.', max_length=255, null=True, unique=True, verbose_name='Force Name')),
            ],
            options={
                'verbose_name': 'Force',
                'verbose_name_plural': 'Forces',
                'db_table': 'forces',
                'ordering': ['force_name'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('news_id', models.AutoField(help_text='Auto-generated permanent ID number of the news post.', primary_key=True, serialize=False, verbose_name='News ID')),
                ('created_at', models.DateTimeField(help_text='Date and time when the news post was created.', verbose_name='Created At')),
                ('subject', models.CharField(help_text='Subject of the news post.', max_length=64, verbose_name='Subject')),
                ('body', models.TextField(help_text='Body of then news post.', verbose_name='Body')),
            ],
            options={
                'verbose_name': 'News',
                'verbose_name_plural': 'News',
                'db_table': 'news',
                'ordering': ('-created_at', '-news_id', 'account'),
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='QuestReward',
            fields=[
                ('reward_num', models.IntegerField(help_text='Reward number.', primary_key=True, serialize=False, verbose_name='Reward Number')),
                ('reward_type', models.IntegerField(choices=[(0, 'Object_always'), (1, 'Object_Choice'), (2, 'Money'), (3, 'Alignment'), (4, 'Skill'), (5, 'Renown'), (6, 'Experience'), (7, 'Quest')], help_text='Reward type.', verbose_name='Reward Type')),
                ('class_restrict', models.IntegerField(choices=[(-1, 'None')], help_text='Player class to which the reward is restricted.', verbose_name='Class Restrict')),
            ],
            options={
                'verbose_name': 'Quest Reward',
                'verbose_name_plural': 'Quest Rewards',
                'db_table': 'quest_rewards',
                'ordering': ['quest', 'reward_type', 'class_restrict', 'reward_num'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Race',
            fields=[
                ('race_id', models.AutoField(help_text='Auto-generated primary identification number of the race.', primary_key=True, serialize=False, verbose_name='Race ID')),
                ('symbol', models.CharField(blank=True, help_text='Internal symbol for the race.', max_length=100, null=True, verbose_name='Symbol')),
                ('display_name', models.CharField(blank=True, help_text='Friendly display name for the race.', max_length=25, null=True, verbose_name='Display Name')),
                ('folk_name', models.CharField(blank=True, help_text='Friendly folk name for the race.', max_length=25, null=True, verbose_name='Folk Name')),
                ('default_movement', models.CharField(blank=True, help_text='Default movement for the race.', max_length=10, null=True, verbose_name='Default Movement')),
                ('description', models.CharField(blank=True, help_text='Description of the race.', max_length=80, null=True, verbose_name='Description')),
                ('default_height', models.SmallIntegerField(blank=True, help_text='Description of the race.', null=True, verbose_name='Description')),
                ('default_weight', models.SmallIntegerField(blank=True, help_text='Default weight of the race.', null=True, verbose_name='Default Weight')),
                ('bonus_fortitude', models.SmallIntegerField(blank=True, help_text='Bonus fortitude for the race.', null=True, verbose_name='Bonus Fortitude')),
                ('bonus_reflex', models.SmallIntegerField(blank=True, help_text='Bonus reflex for the race.', null=True, verbose_name='Bonus Reflex')),
                ('bonus_resilience', models.SmallIntegerField(blank=True, help_text='Bonus resilience for the race.', null=True, verbose_name='Bonus Resilience')),
                ('listen_sound', models.CharField(blank=True, help_text='Listen sound for the race.', max_length=80, null=True, verbose_name='Listen Sound')),
                ('height_bonus', models.SmallIntegerField(blank=True, help_text='Height bonus for the race.', null=True, verbose_name='Height Bonus')),
                ('weight_bonus', models.SmallIntegerField(blank=True, help_text='Weight bonus for the race.', null=True, verbose_name='Weight Bonus')),
                ('short_description', models.CharField(blank=True, help_text='Short description of the race.', max_length=80, null=True, verbose_name='Short Description')),
                ('long_description', models.CharField(blank=True, help_text='Long description of the race.', max_length=512, null=True, verbose_name='Long Description')),
                ('attack_noun', models.CharField(blank=True, help_text='Attack noun for the race.', max_length=25, null=True, verbose_name='Attack Noun')),
                ('attack_type', models.SmallIntegerField(blank=True, help_text='Attack type for the race.', null=True, verbose_name='Attack Type')),
                ('vulnerabilities', models.TextField(blank=True, help_text='Vulnerabilities of the race.', null=True, verbose_name='Vulnerabilities')),
                ('susceptibilities', models.TextField(blank=True, help_text='Susceptibilities of the race.', null=True, verbose_name='susceptibilities')),
                ('resistances', models.TextField(blank=True, help_text='Resistances of the race.', null=True, verbose_name='Resistances')),
                ('immunities', models.TextField(blank=True, help_text='Immunities of the race.', null=True, verbose_name='Immunities')),
                ('additional_str', models.SmallIntegerField(blank=True, help_text='Additional strength of the race.', null=True, verbose_name='Additional Strength')),
                ('additional_agi', models.SmallIntegerField(blank=True, help_text='Additional agility of the race.', null=True, verbose_name='Additional Agility')),
                ('additional_end', models.SmallIntegerField(blank=True, help_text='Additional endurance of the race.', null=True, verbose_name='Additional Endurance')),
                ('additional_per', models.SmallIntegerField(blank=True, help_text='Additional perception of the race.', null=True, verbose_name='Additional Perception')),
                ('additional_foc', models.SmallIntegerField(blank=True, help_text='Additional focus of the race.', null=True, verbose_name='Additional Focus')),
                ('additional_wil', models.SmallIntegerField(blank=True, help_text='Additional willpower of the race.', null=True, verbose_name='Additional Willpower')),
                ('is_playable', models.IntegerField(blank=True, choices=[(0, False), (1, True)], help_text='Is the race playable by regular player characters?', null=True, verbose_name='Is Playable?')),
                ('is_humanoid', models.IntegerField(choices=[(0, False), (1, True)], help_text='Is the race humanoid?', verbose_name='Is Humanoid?')),
                ('is_invertebrae', models.IntegerField(choices=[(0, False), (1, True)], help_text='Is the race an invertebrate?', verbose_name='Is Invertebrae?')),
                ('is_flying', models.IntegerField(choices=[(0, False), (1, True)], help_text='Does the race fly?', verbose_name='Is Flying?')),
                ('is_swimming', models.IntegerField(choices=[(0, False), (1, True)], help_text='Does the race swim?', verbose_name='Is Swimming?')),
                ('darkvision', models.IntegerField(choices=[(0, False), (1, True)], help_text='Does the race have darkvision?', verbose_name='Darkvision?')),
                ('see_invis', models.IntegerField(choices=[(0, False), (1, True)], help_text='Can the race see invisibility?', verbose_name='See Invisibility?')),
                ('is_walking', models.IntegerField(help_text='Does the race walk?', verbose_name='Is Walking?')),
                ('endure_heat', models.IntegerField(choices=[(0, False), (1, True)], help_text='Can the race endure heat?', verbose_name='Endure Heat?')),
                ('endure_cold', models.IntegerField(choices=[(0, False), (1, True)], help_text='Can the race endure heat?', verbose_name='Endure Heat?')),
                ('is_undead', models.IntegerField(choices=[(0, False), (1, True)], help_text='Is the race undead?', verbose_name='Is Undead?')),
            ],
            options={
                'verbose_name': 'Race',
                'verbose_name_plural': 'Races',
                'db_table': 'races',
                'ordering': ['display_name', 'symbol', 'race_id'],
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RaceSkill',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('level', models.IntegerField()),
            ],
            options={
                'db_table': 'races_skills',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RacialAffinity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('affinity_type', models.IntegerField()),
            ],
            options={
                'db_table': 'racial_affinities',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpellFlag',
            fields=[
                ('id', models.IntegerField(help_text='Auto-generated permanent identification number for a spell flag.', primary_key=True, serialize=False, verbose_name='Spell Flag ID')),
                ('name', models.CharField(help_text='Name of the spell flag.', max_length=50, verbose_name='Spell Flag Name')),
                ('description', models.CharField(blank=True, help_text='Description of the spell flag.', max_length=255, null=True, verbose_name='Spell Flag Description')),
            ],
            options={
                'verbose_name': 'Spell Flag',
                'db_table': 'spell_flags',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpellInfo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('enum_symbol', models.CharField(help_text='Internal ENUM symbol of the skill.', max_length=255, verbose_name='ENUM Symbol')),
                ('func_name', models.CharField(blank=True, help_text='Internal function name for the skill.', max_length=255, null=True, verbose_name='Function Name')),
                ('skill_name', models.TextField(blank=True, help_text='Friendly name of the skill.', null=True, verbose_name='Skill Name')),
                ('min_posn', models.IntegerField(blank=True, help_text='Minimum posn.', null=True, verbose_name='Minimum posn')),
                ('min_use', models.IntegerField(blank=True, help_text='Minimum use.', null=True, verbose_name='Minimum use')),
                ('spell_breakpoint', models.IntegerField(blank=True, help_text='Breakpoint of the spell', null=True, verbose_name='Spell Breakpoint')),
                ('held_cost', models.IntegerField(blank=True, help_text='Held cost of the skill', null=True, verbose_name='Held Cost')),
                ('wearoff_msg', models.TextField(blank=True, help_text='Wear-off message shown to the user when the skill fades.', null=True, verbose_name='Wear-Off Message')),
                ('chant_text', models.TextField(blank=True, help_text='Text chanted to implement the skill.', null=True, verbose_name='Chant Text')),
                ('difficulty', models.IntegerField(blank=True, help_text='Difficulty of the skill.', null=True, verbose_name='Difficulty')),
                ('rate', models.IntegerField(blank=True, help_text='Rate of the skill.', null=True, verbose_name='Rate')),
                ('notice_chance', models.IntegerField(blank=True, help_text='Scale.', null=True, verbose_name='Scale')),
                ('appearance', models.TextField(blank=True, help_text='Appearance.', null=True, verbose_name='Appearance')),
                ('component_type', models.IntegerField(blank=True, help_text='Component type.', null=True, verbose_name='Component Type')),
                ('component_value', models.IntegerField(blank=True, help_text='Component value.', null=True, verbose_name='Component Value')),
                ('scale', models.IntegerField(blank=True, help_text='Scale.', null=True, verbose_name='Scale')),
                ('mod_stat_1', models.IntegerField(blank=True, help_text='Mod stat 1.', null=True, verbose_name='Mod Stat 1')),
                ('mod_stat_2', models.IntegerField(blank=True, help_text='Mod stat 1.', null=True, verbose_name='Mod Stat 1')),
                ('is_spell', models.IntegerField(blank=True, choices=[(0, False), (1, True)], help_text='Is this a spell?', null=True, verbose_name='Is Spell?')),
                ('is_skill', models.IntegerField(blank=True, choices=[(0, False), (1, True)], help_text='Is this a skill?', null=True, verbose_name='Is Skill?')),
                ('is_type', models.IntegerField(blank=True, choices=[(0, False), (1, True)], help_text='Is this a type?', null=True, verbose_name='Is Type?')),
                ('decide_func', models.TextField(blank=True, help_text='Internal function for decision-making.', null=True, verbose_name='Decide Function')),
            ],
            options={
                'verbose_name': 'Spell',
                'db_table': 'spell_info',
                'ordering': ['skill_name', 'enum_symbol'],
                'managed': False,
            },
        ),
        migrations.AlterModelOptions(
            name='account',
            options={'managed': False, 'ordering': ['account_name', 'account_id']},
        ),
        migrations.AlterModelOptions(
            name='player',
            options={'managed': False, 'ordering': ['name', 'id']},
        ),
        migrations.AlterModelOptions(
            name='quest',
            options={'managed': False, 'ordering': ['display_name', 'name', 'quest_id'], 'verbose_name': 'Quest', 'verbose_name_plural': 'Quests'},
        ),
        migrations.AlterModelOptions(
            name='queststep',
            options={'managed': False, 'ordering': ['quest', 'step_id'], 'verbose_name': 'Quest Step', 'verbose_name_plural': 'Quest Steps'},
        ),
        migrations.CreateModel(
            name='SpellForce',
            fields=[
                ('spell', models.OneToOneField(help_text='Spell related to a force.', on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='isharweb.spellinfo', verbose_name='Spell')),
            ],
            options={
                'verbose_name': 'Spell Force',
                'db_table': 'spell_forces',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='SpellSpellFlag',
            fields=[
                ('spell', models.OneToOneField(help_text='Spell affected by a flag.', on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='isharweb.spellinfo', verbose_name='Spell')),
            ],
            options={
                'verbose_name': "Spell's Flag",
                'db_table': 'spells_spell_flags',
                'managed': False,
            },
        ),
    ]
